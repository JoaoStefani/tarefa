<?php

namespace App\Models;

use App\Models\Helpers\CawHelpers;
use App\Models\Helpers\CawModelUser;
use Doctrine\DBAL\Query\QueryException;
use Illuminate\Http\Request;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\Auth;

class User extends CawModelUser
{
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    use SoftDeletes;

    protected $rememberTokenName = '';

    protected $table    =  'user';
    protected $fillable = [
        'user',
        'senha',
        'ativo'
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'senha'
    ];
    public $timestamps = true;

    public static function getList(Request $request){

        $builder = User::query();
        CawHelpers::addWhereLike($builder, 'user', $request['user']);

        $builder->orderBy('user.user');

        return $builder->paginate(config('app.list_count'))->appends($request->except('page'));
    }

    public static function login($user, $senha){
        //Senha esta no formato de MD5
        $user = User::query()
                    ->where('user', '=', $user)
                    ->where('senha', '=', MD5($senha))
                    ->where('ativo', '=', 1)
                    ->first();

        return $user;
    }

    public function getUserPermissoes(){
        $user_permissao = $this->hasMany(UserPermissao::class , 'id_user')->get()->pluck('id_permissao');

        return $user_permissao;
    }

    public function getUserPermissoesNickname(){
        $user_permissao = $this->select('p.nickname')
                                ->join('user_permissao as up', 'up.id_user', '=', 'user.id')
                                ->join('permissao as p', 'up.id_permissao', '=', 'p.id')
                                ->where('user.id', '=', $this->id)
                                ->get()->pluck('nickname');

        foreach ($user_permissao as $k => $v){
            $user_permissao[$k] = mb_strtoupper($v);
        }

        return $user_permissao;
    }

    public function setUserPermissoes($permissoes){
        try{
            $res = UserPermissao::where('id_user', '=', $this->id)->delete();
            if($res === false){
                return false;
            }

            foreach ($permissoes as $item){
                $res = (new UserPermissao(['id_user' => $this->id, 'id_permissao' => $item]))->save();
                if($res === false){
                    return false;
                }
            }
        }catch (QueryException $e){
            return $e;
        }
        return true;
    }

    public function save(array $options = [])
    {

        return parent::save($options); // TODO: Change the autogenerated stub
    }

    public static function alterarSenha(Request $request){
        try{

            $senha_atual = $request['password'];
            $nova_senha = $request['new_password'];
            $confirma_senha = $request['confirm_password'];

            $userAuth = Auth::id();

            $user = User::where('senha', '=', MD5($senha_atual))
                                    ->where('id', '=', $userAuth)
                                    ->get();

            if(isset($user[0]['id'])){
                if($nova_senha == $confirma_senha){
                    return true;
                }else{
                    return new \Exception('New password and confirm password are not the same.');;
                }

            }else{
                return new \Exception('Wrong password');
            }

        }catch (QueryException $e){
            return $e;
        }
    }
}